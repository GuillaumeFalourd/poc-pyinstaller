name: PyInstaller

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
    steps:

    - uses: actions/checkout@v2.3.4

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Udpate variables in __init__.py file (Unix)
      run: |
        if [ "${{ matrix.os }}" != "windows-latest" ]; then
          echo "__version__ = \"${URL_VERSION}\"" > ${{ github.workspace }}/poc/__init__.py
          echo "__url__ = \"${URL_TEST}\"" >> ${{ github.workspace }}/poc/__init__.py
          cat ${{ github.workspace }}/poc/__init__.py
        fi
      env:
        URL_TEST: 'https://google.com'
        URL_VERSION: '1.0.0'
      shell: bash

    - name: Udpate variables in __init__.py file (Windows)
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "__version__ = \"${URL_VERSION}\"" > ${{ github.workspace }}\poc\__init__.py
          echo "__url__ = \"${URL_TEST}\"" >> ${{ github.workspace }}\poc\__init__.py
          cat ${{ github.workspace }}\poc\__init__.py
        fi
      env:
        URL_TEST: 'https://google.com'
        URL_VERSION: '1.0.0'
      shell: bash

    - run: pip install -r requirements.txt pyinstaller

    - name: Test script with new variables
      run: python3 poc.py

    - run: pyinstaller poc/poc.py --onefile --clean

    - name: Check files
      run: |
        cd ./dist
        ls

    - name: Extract Unix binary
      uses: actions/upload-artifact@v2
      if: ${{ matrix.os }} != 'windows-latest'
      with:
        name: artifact-${{ matrix.os }}
        path: dist/poc

    - name: Extract Windows binary
      uses: actions/upload-artifact@v2
      if: ${{ matrix.os }} == 'windows-latest'
      with:
        name: artifact-${{ matrix.os }}
        path: dist/poc.exe
